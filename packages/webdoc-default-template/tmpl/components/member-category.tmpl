<?js
    /* Renders a list of members matching the category constraints! */

    /*::
     import type {ClassDoc, NSDoc, TypedefDoc, Doc} from "@webdoc/model";

     type CategoryData = {
       title: string,
       parent: ClassDoc | NSDoc | TypedefDoc,
       constraints: {
         access: "public" | "protected" | "private",
         type: ("EventDoc" | "MethodDoc" | "PropertyDoc")[] | ("EventDoc" | "MethodDoc" | "PropertyDoc")
       }
     }
     */

    const categoryData /*: CategoryData */ = obj;
    const categoryTitle = categoryData.title;

    const parent = categoryData.parent;
    const contraints = categoryData.contraints;

    const categoryMembers /*: Doc[] */ = categoryData.parent.members
      .filter((child) => {
        // Match access
        if (constraints.access) {
          if ((child.access || "public") !== constraints.access) {
            return false;
          }
        }

        if (child.type === "MethodDoc" && child.name === "constructor") {
          return false;// Filter constructors always!
        }

        // Match document-type
        if (constraints.type) {
          if (Array.isArray(constraints.type)) {
            if (!constraints.type.includes(child.type)) {
              return false;
            }
          } else {
            if (constraints.type !== child.type) {
              return false;
            }
          }
        }

        return true;
      })

    if (categoryMembers.length === 0) {
      return;
    }
  ?>

<h2 class="section-title"><?js= categoryTitle ?></h2>
<hr />

<?js
    categoryMembers.forEach((member) => {
 ?>
    <?js= this.partial("components/member.tmpl", member) ?>
<?js }) ?>
