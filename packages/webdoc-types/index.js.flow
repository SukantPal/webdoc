// @flow
export type DataType = (string|DocLink)[] & { template: string };

export type SourceFile = {
  content?: string;
  path: string;
  package: PackageDoc;
};

export type ParserOpts = {
  memberof?: string[]
};

export type Param = {
  identifier: string,
  dataType: DataType,
  description: string,
  optional?: Boolean,
  default?: string,
  variadic?: boolean,
};

export type Example = {
  caption: string,
  code: string
};

export type SymbolLocation = {
  start: { line: number, column: number },
  end: { line: number, column: number },
  file: SourceFile,
  fileName: string
}

export type Typedef = {
  of: string[],
  alias: String,
};

export type TypedDesc = {
  dataType: DataType,
  description: string,
};

export type DocLink = Doc | string;

export type Return = TypedDesc;

export type DocType =
  "RootDoc" |
  "ClassDoc" |
  "EnumDoc" |
  "EventDoc" |
  "ObjectDoc" |
  "FunctionDoc" |
  "NSDoc" |
  "MethodDoc" |
  "MixinDoc" |
  "PackageDoc" |
  "PropertyDoc" |
  "TutorialDoc" |
  "TypedefDoc";

export type BaseDoc = {
  id: string,
  name: string,
  path: string,
  stack: string[],
  parent?: Doc,
  children?: Doc[],
  members: Doc[],
  tags?: Tag[],
  brief?: string,
  description?: string,
  access?: "public" | "protected" | "private",
  authors?: string[],
  deprecated?: string,
  extends?: DocLink[],
  examples?: Example[],
  fires?: [],
  license?: string,
  loc?: SymbolLocation,
  scope?: "static" | "instance" | "inner" | "default",
  see?: DocLink[],
  since?: string,
  todo?: string[],
  throws?: DocLink[],
  version?: "alpha" | "beta" | "internal" | "public" | "deprecated",
  parserOpts?: ParserOpts
};

export type Doc =
  RootDoc |
  ClassDoc |
  EnumDoc |
  EventDoc |
  ObjectDoc |
  FunctionDoc |
  NSDoc |
  MethodDoc |
  MixinDoc |
  PackageDoc |
  PropertyDoc |
  TutorialDoc |
  TypedefDoc;

export type RootDoc = {
  ...BaseDoc,
  packages: PackageDoc[],
  type: "RootDoc"
};

export type ClassDoc = {
  ...BaseDoc,
  params?: Param[],
  implements?: DocLink[],
  mixes?: [],
  type: "ClassDoc"
};

export type EnumDoc = {
  ...BaseDoc,
  type: "EnumDoc"
};

export type EventDoc = {
  ...BaseDoc,
  eventType: string,
  params?: Param[],
  type: "EventDoc"
};

export type FunctionDoc = {
  ...BaseDoc,
  params: Param[],
  returns: Return[],
  type: "FunctionDoc"
};

export type MethodDoc = {
  ...BaseDoc,
  params: Param[],
  returns: Return[],
  inherited: boolean,
  inherits: MethodDoc,
  overrides: boolean,
  type: "MethodDoc"
};

export type MixinDoc = {
  ...BaseDoc,
  mixes?: [],
  type: "MixinDoc"
};

export type NSDoc = {
  ...BaseDoc,
  type: "NSDoc"
};

export type ObjectDoc = {
  ...BaseDoc,
  implements?: DocLink[],
  mixes?: [],
  type: "ObjectDoc"
};

export type PackageDoc = {
  ...BaseDoc,
  api: Doc[],
  location: string,
  metadata: Object,
  type: "PackageDoc"
};

export type PropertyDoc = {
  ...BaseDoc,
  constant?: boolean,
  dataType?: DataType,
  dataValue?: string, // Enumerations/constants
  defaultValue?: string,
  inherited?: boolean,
  inherits?: PropertyDoc,
  optional?: boolean,
  readonly?: boolean,
  type: "PropertyDoc"
};

export type Tutorial = {
  ...BaseDoc,
  title: string,
  content: string,
  type: "TutorialDoc"
};

export type TutorialDoc = Tutorial;

export type TypedefDoc = {
  ...BaseDoc,
  of: [string],
  alias: string,
  type: "TypedefDoc",
  implements?: DocLink[]
};

export type BaseTag = {
  name: string,
  value: string,
  type: "link" | "param" | "return" | "throws"
};

export type Tag = AccessTag | BaseTag | DeprecatedTag | ExampleTag | ExtendsTag | TypedTag |
    ParamTag | ReturnTag | MemberTag | ImplementsTag | MixesTag |
    ThrowsTag | PrivateTag | PropertyTag | ProtectedTag | PublicTag

export type AccessTag = {
  ...BaseTag,
  access: "public" | "protected" | "private",
  type: "AccessTag"
};

export type DeprecatedTag = {
  ...BaseTag,
  deprecated: string | boolean,
  type: "DeprecatedTag"
};

export type EventTag = {
  ...BaseTag,
  event: string,
  type: "EventTag"
};

export type ExampleTag = {
  ...BaseTag,
  code: string,
  type: "ExampleTag"
};

export type ExtendsTag = {
  ...BaseTag,
  type: "ExtendsTag"
};

export type FiresTag = {
  ...BaseTag,
  event: string,
  type: "FiresTag"
};

export type ImplementsTag = {
  ...BaseTag,
  type: "ImplementsTag"
};

export type InnerTag = {
  ...BaseTag,
  type: "InnerTag"
};

export type InstanceTag = {
  ...BaseTag,
  type: "InstanceTag"
};

export type MixesTag = {
  ...BaseTag,
  type: "MixesTag"
};

export type MemberTag = {
  ...BaseTag,
  dataType: DataType
};

export type MemberofTag = {
  ...BaseTag,
  scope: string,
  type: "MemberofTag"
};

export type NameTag = {
  ...BaseTag,
  alias: string,
  type: "NameTag"
};

export type ParamTag = {
  ...TypedTag,
  identifier: string,
  referred: string,
  description: string,
  optional?: Boolean,
  default?: string,
  variadic?: boolean,
  type: "ParamTag"
};

export type ReturnTag = {
  ...TypedTag,
  type: "ReturnTag"
};

export type StaticTag = {
  ...BaseTag,
  type: "StaticTag"
};

export type ScopeTag = {
  ...BaseTag,
  scope: "static" | "instance" | "inner",
  type: "ScopeTag"
};

export type ThrowsTag = {
  ...TypedTag,
  type: "ThrowsTag"
};

export type TypeTag = {
  ...BaseTag,
  dataType: DataType,
  type: "TypeTag"
};

export type TypedTag = {
  ...BaseTag,
  dataType: DataType,
  description: string,
};

export type TypedefTag = {
  dataType: DataType,
  alias: String,
  type: "TypedefTag"
};

export type PrivateTag = {
  ...BaseTag,
  type: "PrivateTag"
};

export type PropertyTag = {
    ...BaseTag,
    dataType: DataType,
    description: string,
    type: "PropertyTag"
};

export type ProtectedTag = {
  ...BaseTag,
  type: "ProtectedTag"
};

export type PublicTag = {
  ...BaseTag,
  type: "PublicTag"
};
